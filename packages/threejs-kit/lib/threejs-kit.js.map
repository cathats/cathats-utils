{"version":3,"sources":["../src/threejs-kit.ts","../src/core/InitScene.ts","../src/core/module/ElementModule.ts","../src/utils/update-on-resize.ts","../src/core/module/StatModule.ts","../src/core/module/OrbitControlsModule.ts","../src/core/module/GuiControlsModule.ts","../src/gui/controls/RendererControl.ts"],"names":["threejs_kit_exports","__export","InitScene_default","RendererControl_default","__toCommonJS","THREE","ElementModule","context","container","element","updateOnResize","callback","resize","import_stats","StatModule","Stat","import_OrbitControls","OrbitControlsModule","import_lil_gui","GuiControlsModule","GUI","fn","InitScene","options","backgroundColor","fogColor","clientWidth","clientHeight","animate","RendererControl","gui","webGLRenderer","scene","camera","clearSettingsFolder","value","autoClear","clearColor","clearColorHolder"],"mappings":"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","sourcesContent":["import InitScene from \"./core/InitScene\";\n\nimport RendererControl from './gui/controls/RendererControl'\n\nimport {\n    CurrentContainer,\n    InitOptions\n} from './@types/base'\n\nexport type {\n    CurrentContainer,\n    InitOptions,\n}\n\nexport {\n    InitScene,\n    RendererControl\n};\n","'use strict';\n\nimport * as THREE from 'three';\nimport {CurrentContainer, InitOptions} from \"../@types/base\";\nimport ElementModule from \"./module/ElementModule\";\nimport {updateOnResize} from \"../utils/update-on-resize\";\nimport StatModule from \"./module/StatModule\";\nimport OrbitControlsModule from \"./module/OrbitControlsModule\";\nimport GuiControlsModule from \"./module/GuiControlsModule\";\n\nclass InitScene {\n    public element!: ElementModule;\n    public stat!: StatModule;\n    public controller!: OrbitControlsModule;\n    public gui!: GuiControlsModule\n\n    public scene!: THREE.Scene;\n    public camera!: THREE.PerspectiveCamera;\n    public renderer!: THREE.WebGLRenderer;\n\n    constructor(private container: CurrentContainer, public options: InitOptions) {\n        this.element = new ElementModule(this, container);\n        this.init();\n\n        this.stat = new StatModule(this);\n        this.controller = new OrbitControlsModule(this);\n        this.gui = new GuiControlsModule(this);\n    }\n\n    init() {\n        const {\n            backgroundColor = 0x000000,\n            fogColor\n        } = this.options;\n\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(backgroundColor);\n\n        if (fogColor) {\n            this.scene.fog = new THREE.Fog(fogColor, 1, 50);\n        }\n\n        const {clientWidth, clientHeight} = this.element.getSize()\n        this.camera = new THREE.PerspectiveCamera(75, clientWidth / clientHeight, 0.1, 100);\n\n        this.renderer = new THREE.WebGLRenderer({antialias: true});\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.renderer.setSize(clientWidth, clientHeight);\n        this.renderer.setClearColor(backgroundColor)\n\n        updateOnResize(() => {\n            const {clientWidth, clientHeight} = this.element.getSize()\n            this.camera.aspect = clientWidth / clientHeight;\n            this.camera.updateProjectionMatrix();\n            this.renderer.setSize(clientWidth, clientHeight);\n        })\n\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n\n        this.element.appendChild(this.renderer.domElement)\n    }\n\n    animate(fn = () => {}) {\n        const animate = () => {\n            requestAnimationFrame(animate);\n            fn();\n            this.renderer.render(this.scene, this.camera);\n\n            this.stat?.update();\n            this.controller?.update();\n        }\n        animate();\n    }\n}\n\nexport default InitScene","import {CurrentContainer} from \"../../@types/base\";\nimport InitScene from \"../InitScene\";\n\nexport default class ElementModule {\n    readonly name = 'element';\n    readonly dependencies = [];\n    private readonly element: HTMLElement;\n\n    constructor(context: InitScene, container: CurrentContainer) {\n        if (container instanceof HTMLElement) {\n            this.element = container;\n        } else {\n            this.element = document.querySelector(container) as HTMLElement;\n        }\n    }\n\n    get() {\n        return this.element;\n    }\n\n    getSize() {\n        return {\n            clientWidth: this.element.clientWidth,\n            clientHeight: this.element.clientHeight\n        }\n    }\n\n    appendChild(element: HTMLElement) {\n        // if (this.element.hasChildNodes()) return\n        this.element.appendChild(element);\n    }\n}","export function updateOnResize(callback: () => void) {\n  const resize = () => {\n    callback();\n  };\n\n  window.addEventListener('resize', resize, false);\n}","import Stat from \"three/examples/jsm/libs/stats.module\";\n\nimport InitScene from \"../InitScene\";\n\nexport default class StatModule {\n    readonly name = 'stat';\n    readonly dependencies = ['element'];\n    private stat?: Stat\n\n    constructor(readonly context: InitScene) {\n        this.init();\n    }\n\n    init() {\n        if (!this.context.element) return;\n        if (!this.context.options.statEnabled) return;\n        this.stat = new Stat();\n        this.context.element.appendChild(this.stat.dom);\n    }\n\n    get() {\n        return this.stat;\n    }\n\n    update() {\n        if (!this.stat) return;\n        this.stat.update();\n    }\n}","import InitScene from \"../InitScene\";\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nexport default class OrbitControlsModule {\n    readonly name = 'orbit-controls';\n    readonly dependencies = ['camera', 'renderer'];\n    private controller?: OrbitControls;\n\n    constructor(readonly context: InitScene) {\n        this.init();\n    }\n\n    init() {\n        if (!this.context.options.orbitControlsEnabled) return\n\n        this.controller = new OrbitControls(this.context.camera, this.context.renderer.domElement);\n\n        this.controller.enableDamping = true\n        this.controller.dampingFactor = 0.05\n        this.controller.minDistance = 1\n        this.controller.maxDistance = 100\n        this.controller.minPolarAngle = Math.PI / 4\n        this.controller.maxPolarAngle = (3 * Math.PI) / 4\n    }\n\n    get() {\n        return this.controller;\n    }\n\n    update() {\n        if (!this.controller) return;\n        this.controller.update();\n    }\n}","import GUI from 'lil-gui'\n\nimport InitScene from \"../InitScene\";\nimport {CoreModule} from \"../../@types/core-module\";\n\nexport default class GuiControlsModule implements CoreModule {\n    readonly name = 'gui-controls';\n    readonly dependencies = [];\n    private gui?: GUI;\n\n    constructor(readonly context: InitScene) {\n        this.init()\n    }\n\n    init() {\n        const options = this.context.options;\n        if (!options.guiControlsEnabled) return;\n        if (this.gui) return;\n\n        this.gui = new GUI();\n    }\n\n    get() {\n        return this.gui\n    }\n\n    inject(fn: any) {\n        if (!this.gui) return;\n        if (!fn) return;\n\n        fn(this.gui, this.context)\n    }\n\n    close() {\n        if (!this.gui) return;\n        this.gui.close()\n    }\n}","import * as THREE from \"three\";\nimport GUI from \"lil-gui\";\n\nexport class RendererControl {\n    private name = 'WebGLRenderer'\n    private rendererFolder!: GUI;\n    private enum = {\n        toneMappingOptions: {\n            None: THREE.NoToneMapping,\n            Linear: THREE.LinearToneMapping,\n            Reinhard: THREE.ReinhardToneMapping,\n            Cineon: THREE.CineonToneMapping,\n            ACESFilmic: THREE.ACESFilmicToneMapping,\n            Custom: THREE.CustomToneMapping,\n        },\n        shadowMapping: {\n            Basic: THREE.BasicShadowMap,\n            PCFS: THREE.PCFShadowMap,\n            PCFSoft: THREE.PCFSoftShadowMap,\n            VSM: THREE.VSMShadowMap,\n        },\n        outputEncodings: {\n            // Linear: THREE.LinearEncoding,\n            // sRGB: THREE.sRGBEncoding,\n        },\n    }\n    private propertyHolder: any = {}\n\n    constructor(\n        readonly gui: GUI,\n        readonly webGLRenderer: THREE.WebGLRenderer,\n        readonly scene: THREE.Scene,\n        readonly camera: THREE.Camera,\n    ) {\n        this.init()\n    }\n\n    init() {\n        this.rendererFolder = this.gui.addFolder(this.name);\n        this.initHolder()\n\n        // this.rendererFolder.onChange((_) => {\n        //     this.updateWebGLRendererProperties();\n        // });\n        //\n        const clearSettingsFolder = this.rendererFolder.addFolder(\"clearSettings\");\n        clearSettingsFolder.add(this.propertyHolder.clearSettings, \"autoClear\");\n        clearSettingsFolder.addColor(this.propertyHolder.clearSettings, \"clearColor\");\n        clearSettingsFolder.onChange((value) => {\n            const { autoClear, clearColor } = value.object as any;\n            console.log('autoClear, clearColor', autoClear, clearColor)\n            this.webGLRenderer.autoClear = autoClear;\n            this.webGLRenderer.setClearColor(0x000000);\n            this.webGLRenderer.clear()\n            // this.webGLRenderer.clearColor();\n        })\n\n        this.rendererFolder.close();\n    }\n\n    initHolder() {\n        const clearColorHolder = new THREE.Color();\n        this.webGLRenderer.getClearColor(clearColorHolder);\n\n        this.propertyHolder = {\n            shadowMap: {\n                enabled: this.webGLRenderer.shadowMap.enabled,\n            },\n            clearSettings: {\n                autoClear: this.webGLRenderer.autoClear,\n                clearColor: clearColorHolder.getHex()\n            },\n        }\n\n        console.log(' this.propertyHolder',  this.propertyHolder)\n    }\n\n    updateWebGLRendererProperties() {\n        this.webGLRenderer.shadowMap.enabled = this.propertyHolder.shadowMap.enabled;\n\n        // clear setting\n        this.webGLRenderer.autoClear = this.propertyHolder.clearSettings.autoClear;\n        this.webGLRenderer.setClearColor(this.propertyHolder.clearSettings.clearColor);\n\n        console.log('===', this.webGLRenderer, this.propertyHolder.clearSettings)\n        this.webGLRenderer.clear()\n    }\n}\n\nexport default RendererControl"]}